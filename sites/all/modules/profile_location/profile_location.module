<?php
// $Id: profile_location.module,v 1.1.4.6 2011/01/01 02:18:28 bacteriaman Exp $

/**
 * @file
 * The profile_location.module file, which produces the primary functionality.
 *
 */

define('PRIMARY_COUNTRY', 'US'); // 2-letter capitalized iso abbreviation for primary country
define('SECONDARY_COUNTRY', 'CA'); // 2-letter capitalized iso abbreviation for secondary country

/**
 * Implementation of hook_menu().
 */
function profile_location_menu() {
  $items = array();

  $items['admin/user/profile_location'] = array(
    'title' => 'Profile location settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_location_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure your profile location preferences and field assignments.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function profile_location_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register' || $form_id == 'user_profile_form') {
    if (module_exists('profile')) {
      $category = variable_get('profile_location_category', NULL);
      $country = variable_get('profile_location_country', NULL);
      $state = variable_get('profile_location_state', NULL);

      if (isset($form[$category][$country])) {
        $default_value = empty($form[$category][$country]['#default_value']) ? variable_get('profile_location_default_country', PRIMARY_COUNTRY) : $form[$category][$country]['#default_value'];
        // load profile country list selection field options
        $form[$category][$country]['#options'] = profile_location_countries();
        $form[$category][$country]['#default_value'] = $default_value;
      }

      if (isset($form[$category][$state])) {
        // create province element from state element
        $form[$category]['profile_province'] = $form[$category][$state];

        // load state field options
        $form[$category][$state]['#prefix'] = '<div id="state" style="display: none;" >';
        $form[$category][$state]['#options'] = profile_location_states(PRIMARY_COUNTRY);
        $form[$category][$state]['#suffix'] = '</div>';

        // load province field options
        $form[$category]['profile_province']['#prefix'] = '<div id="province" style="display: none;" >';
        $form[$category]['profile_province']['#options'] = profile_location_states(SECONDARY_COUNTRY);
        $form[$category]['profile_province']['#suffix'] = '</div>';

        $form['#validate'][] = 'profile_location_validate_handler';
      }
    }
  }

  // show/hide state/province divs according to country selection
  drupal_add_js(
    "$.fn.showIf = function( show, arg ) {
       return this[ show ? 'show' : 'hide' ]( arg );
     };
     $().ready(function() {
       $('#edit-profile-country').change(function() {
         var country = $(this).val();
         $('#state').showIf( country == '". PRIMARY_COUNTRY ."' );
         $('#province').showIf( country == '". SECONDARY_COUNTRY ."' );
       }).trigger('change');
     }); ",
     'inline');
}

/**
 * Custom validate handler to set state/province value (if applicable).
 */
function profile_location_validate_handler($form, &$form_state) {
  $category = variable_get('profile_location_category', NULL);
  $country = variable_get('profile_location_country', NULL);
  $state = variable_get('profile_location_state', NULL);
  if ($form_state['values'][$country] == SECONDARY_COUNTRY) {
    // update state value with province selection
    form_set_value($form[$category][$state], $form_state['values']['profile_province'], $form_state);
  }
  else if ($form_state['values'][$country] != PRIMARY_COUNTRY) {
    // non US/CA country selection so clear state value
    form_set_value($form[$category][$state], NULL, $form_state);
  }
  if ($form[$category][$state]['#required']) {
    // custom validation when state/province field is required
    if (($form_state['values'][$country] == PRIMARY_COUNTRY && empty($form_state['values'][$state])) || ($form_state['values'][$country] == SECONDARY_COUNTRY && empty($form_state['values']['profile_province']))) {
      form_set_error($state, t('%state field is required.', array('%state' => $form[$category][$state]['#title'])));
    }
  }
}

/**
 * Implementation of hook_user().
 */
function profile_location_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
    case 'submit':
      // housecleaning, remove profile_province from user account data
      $edit['profile_province'] = NULL;
      break;
  }
}

/**
 * Implementation of hook_profile_alter().
 */
function profile_location_profile_alter(&$account) {
  $profile = user_load($account->uid);
  $category = variable_get('profile_location_category', NULL);
  $country = variable_get('profile_location_country', NULL);
  $state = variable_get('profile_location_state', NULL);
  if ($state) {
    $account->content[$category][$state]['#value'] = profile_location_get_state($profile->$country, $account->content[$category][$state]['#value']);
  }
  if ($country) {
    $account->content[$category][$country]['#value'] = profile_location_get_country($account->content[$category][$country]['#value']);
  }
}

/**
 * Retrieve list of countries.
 *
 * @returns array
 */
function profile_location_countries() {
  $countries = array();
  $result = db_query("SELECT iso, name FROM {profile_location_country} ORDER BY name ASC");
  while ($country = db_fetch_object($result)) {
    $countries[$country->iso] = $country->name;
  }

  return $countries;
}

/**
 * Retrieve full country name.
 *
 * @param string
 * @returns string
 */
function profile_location_get_country($iso) {
  $countries = profile_location_countries();

  return $countries[$iso];
}

/**
 * Retrieve list of US states or CA provinces
 *
 * @param   string
 * @returns array
 */
function profile_location_states($iso) {
  // define default value when selection is optional
  $states = array(t('--select--'));
  $result = db_query("SELECT abbrev, name FROM {profile_location_state} WHERE iso = '%s' ORDER BY name ASC", $iso);
  while ($state = db_fetch_object($result)) {
    $states[$state->abbrev] = $state->name;
  }

  return $states;
}

/**
 * Retrieve full state/province name.
 *
 * @param string
 * @param string
 * @returns string
 */
function profile_location_get_state($iso, $apprev) {
  $states = profile_location_states($iso);

  return $states[$apprev];
}

/**
 * Custom function for profile location admin form.
 */
function profile_location_admin_form() {
  $result = db_query("SELECT fid, name, category FROM {profile_fields} WHERE type = 'selection'");

  $options = array();
  while ($select = db_fetch_object($result)) {
    $options[$select->name] = $select->name .' ('. $select->category .')';
  }

  if (count($options)) {
    $form['profile_location_default_country'] = array(
      '#type' => 'select',
      '#default_value' => variable_get('profile_location_default_country', PRIMARY_COUNTRY),
      '#options' => profile_location_countries(),
      '#description' => t('Choose the default Country selection.'),
    );
    $form['profile_location_country'] = array(
      '#type' => 'select',
      '#default_value' => variable_get('profile_location_country', NULL),
      '#options' => $options,
      '#description' => t('Choose a profile list selection field to use for Country.'),
    );
    $form['profile_location_state'] = array(
      '#type' => 'select',
      '#default_value' => variable_get('profile_location_state', NULL),
      '#options' => $options,
      '#description' => t('Choose a profile list selection field to use for State/Province.'),
    );

    return system_settings_form($form);
  }
  else {
    drupal_set_message(t('You must first create !profile list selection fields for both Country and State.', array('!profile' => l('profile', 'admin/user/profile'))), 'error');
    return FALSE;
  }
}

/**
 * Profile location admin form validation function.
 */
function profile_location_admin_form_validate($form, &$form_state) {
  if ($form_state['values']['profile_location_country'] == $form_state['values']['profile_location_state']) {
    form_set_error('profile_location_state', t('Country and state/province cannot be the same profile list selection field.'));
  }
  $result = db_query("SELECT pf1.name, pf2.name, pf1.category FROM {profile_fields} pf1, {profile_fields} pf2
                      WHERE pf1.name = '%s' AND pf2.name = '%s' AND pf1.category = pf2.category",
                      $form_state['values']['profile_location_country'], $form_state['values']['profile_location_state']);
  if ($profile = db_fetch_object($result)) {
    // country and state/province fields belong to the same profile category
    // manually save the profile category because it's not part of the form
    variable_set('profile_location_category', $profile->category);
  }
  else {
    form_set_error('profile_location_state', t('Country and State/Province fields must belong to the same profile category.'));
  }
}