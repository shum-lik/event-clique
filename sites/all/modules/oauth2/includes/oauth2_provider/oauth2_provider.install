<?php
// $Id: oauth2_provider.install,v 1.1 2011/01/25 09:27:08 hswong3i Exp $

/**
 * @file
 * OAuth2.0 Provider Support install and uninstall code.
 */

/**
 * Implementation of hook_install().
 */
function oauth2_provider_install() {
  drupal_install_schema('oauth2_provider');
}

/**
 * Implementation of hook_uninstall().
 */
function oauth2_provider_uninstall() {
  drupal_uninstall_schema('oauth2_provider');
}

/**
 * Implementation of hook_schema().
 */
function oauth2_provider_schema() {
  $schema = array();

  $schema['cache_oauth2'] = drupal_get_schema_unprocessed('system', 'cache');

  $schema['oauth2_authorize'] = array(
    'description' => t('OAuth2.0 user-apps-scpoe authorization mapping.'),
    'fields' => array(
      'client_id' => array(
        'description' => t('The client identifier.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'scope_id' => array(
        'description' => t('The scope identifier.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'mapping' => array('uid', 'client_id', 'scope_id'),
    ),
  );

  $schema['oauth2_access_tokens'] = array(
    'description' => t('Access tokens stored on behalf of providers or consumers for request and services accesses.'),
    'fields' => array(
      'client_id' => array(
        'description' => t('The client identifier.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'sid' => array(
        'description' => "Primary key: A session ID. The value is generated by PHP's Session API.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => ''
      ),
      'oauth_token' => array(
        'description' => t('The access token issued by the authorization server.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'expires' => array(
        'description' => t('The duration in seconds of the access token lifetime if an access token is included.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'scope' => array(
        'description' => t('The scope of the access token as a list of space-delimited strings if an access token is included.'),
        'type' => 'text',
      ),
    ),
    'primary key' => array('client_id', 'oauth_token'),
    'indexes' => array(
      'uid' => array('uid'),
      'sid' => array('sid'),
    ),
  );

  $schema['oauth2_auth_codes'] = array(
    'description' => t('Authorization code stored on behalf of providers or consumers for request and services accesses.'),
    'fields' => array(
      'client_id' => array(
        'description' => t('The client identifier.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'sid' => array(
        'description' => "Primary key: A session ID. The value is generated by PHP's Session API.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => ''
      ),
      'code' => array(
        'description' => t('The authorization code received from the authorization server.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'redirect_uri' => array(
        'description' => t('An absolute URI to which the authorization server will redirect the user-agent to when the end-user authorization step is completed.'),
        'type' => 'text',
      ),
      'expires' => array(
        'description' => t('The duration in seconds of the access token lifetime if an access token is included.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'scope' => array(
        'description' => t('The scope of the access token as a list of space-delimited strings if an access token is included.'),
        'type' => 'text',
      ),
    ),
    'primary key' => array('client_id', 'code'),
    'indexes' => array(
      'uid' => array('uid'),
      'sid' => array('sid'),
    ),
  );

  $schema['oauth2_refresh_tokens'] = array(
    'description' => t('Refresh tokens stored on behalf of providers or consumers for request and services accesses.'),
    'fields' => array(
      'client_id' => array(
        'description' => t('The client identifier.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'sid' => array(
        'description' => "Primary key: A session ID. The value is generated by PHP's Session API.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => ''
      ),
      'refresh_token' => array(
        'description' => t('The refresh token associated with the access token to be refreshed.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'expires' => array(
        'description' => t('The duration in seconds of the refresh token lifetime if an access token is included.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'scope' => array(
        'description' => t('The scope of the refresh token as a list of space-delimited strings if an access token is included.'),
        'type' => 'text',
      ),
    ),
    'primary key' => array('client_id', 'refresh_token'),
    'indexes' => array(
      'uid' => array('uid'),
      'sid' => array('sid'),
    ),
  );

  return $schema;
}
